"""
COSC 340 "Project 1" written in Python by Drake Nisbet for Dr. Beau Christ.
This project simulates an DFA (deterministic finite automata) given by the dfa.txt file
and writes "accept" or "reject" to the outfile.txt file for each input string in the input.txt file.
"""

class DFA:
    def __init__(self, states, alphabet, start_state, accept_states, transitions):
        self.states = set(states)
        self.alphabet = set(alphabet)
        self.start_state = start_state
        self.accept_states = set(accept_states)
        self.transitions = transitions

    def process_input(self, input_string):
        current_state = self.start_state

        if (input_string == "@"): # string is empty or "@" - returns start state
            return "accept" if current_state in self.accept_states else "reject"
        else:
            for symbol in input_string:
                if (current_state, symbol) not in self.transitions:
                    return "reject"
                current_state = self.transitions[(current_state, symbol)]
            return "accept" if current_state in self.accept_states else "reject"

def read_dfa_file(file_path):
    with open(file_path, 'r') as file:
        lines = file.readlines()

    states = lines[0].strip().split(',')
    alphabet = lines[1].strip().split(',')
    start_state = lines[2].strip()
    accept_states = lines[3].strip().split(',')

    transitions = {}
    for line in lines[4:]:
        rule = line.strip().split(',')
        transitions[(rule[0], rule[1])] = rule[2]

    return DFA(states, alphabet, start_state, accept_states, transitions)

def main():

    dfa = read_dfa_file("dfa.txt")

    with open("input.txt", 'r') as input_file, open("output.txt", 'w') as output_file:
        for line in input_file:
            input_string = line.strip()
            result = dfa.process_input(input_string)
            output_file.write(result + '\n')

if __name__ == "__main__":
    main()
